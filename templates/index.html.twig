{% extends "base.html.twig" %}
{% block body %}
    <style>
        .create {
            min-height: 100%;
            min-width: 100%;
            content: "";
            background: linear-gradient(to bottom right, red, yellow);
            color: white;
            border-style: solid;
        }

        .edit {
            width: 100%;
            background: #0f6674;
        }

        .nav-link {
            cursor: pointer;
        }

        #jsGrid {
            min-width: 100% !important;
        }

        .card-body {
            min-width: 100% !important;
        }

        header {
            max-width: 100%;
        }

        #jsGrid {
            max-width: 100% !important;
            max-height: 100% !important;
            margin: 1% 0 5%;
        }


        .jsgrid-cell.current-day, .jsgrid-header-cell.current-day {
            background: #b9bbbe;
            color: #0056b3;
            border-radius: 5px;
        }

        .entry {
            background: #0f6674;
            color: white !important;
        }

        .user-image {
            max-width: 20%;
            background: white;
        }

        .navbar {
            margin-top: 5%;
        }

        body {

            background: rgba(255, 255, 255, 1);
            background: -moz-linear-gradient(left, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: -webkit-gradient(left top, right top, color-stop(0%, rgba(255, 255, 255, 1)), color-stop(47%, rgba(246, 246, 246, 1)), color-stop(100%, rgba(237, 237, 237, 1)));
            background: -webkit-linear-gradient(left, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: -o-linear-gradient(left, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: -ms-linear-gradient(left, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            background: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(246, 246, 246, 1) 47%, rgba(237, 237, 237, 1) 100%);
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#ededed', GradientType=1);
            background-repeat: no-repeat;
        }

    </style>
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                {% include"menu.html.twig" %}
            </div>
        </div>
        <div class="col">
            <div id="jsGrid"></div>
        </div>
    </div>
    <script>
        const DATE_FORMAT = 'DD-MM-YYYY';
        const setWeekDates = (startOfWeek, endOfWeek) => {
            let i;
            const selectedWeekDays = [];
            for (i = startOfWeek; i <= endOfWeek; i++) {
                selectedWeekDays.push(moment().day(i).format(DATE_FORMAT));
            }
            return selectedWeekDays;
        };
        const setMonthDates = (selectedMonth) => {
            let i;
            const selectedMonthDays = [];
            const daysInMonth = moment().month(selectedMonth).daysInMonth();

            for (i = 1; i <= daysInMonth; i++) {
                selectedMonthDays.push(moment().month(selectedMonth).date(i).format(DATE_FORMAT));
            }
            return selectedMonthDays;
        };
        const setYearDates = (year) => {
            let i;
            const selectedYearDates = [];
            for (let i = 0; i < 366; i++) {
                selectedYearDates.push(moment().year(year).dayOfYear(i).format(DATE_FORMAT));
            }
            return selectedYearDates;
        };

        const readAllEventsRoute = "{{ path('read_all_calendar_events')|escape('js') }}";
        const readEventByIdRoute = "{{ path('read_calendar_event_by_id', {calendarEventId: '1'})|escape('js') }}";
        const readAllUsersRoute = "{{ path('read_all_users')|escape('js') }}";
        const createRoute = "{{ path('create_event')|escape('js') }}";
        const updateRoute = "{{ path('update_calendar_event_by_id',{calendarEventId: 1})|escape('js') }}";
        const teamColumn = {name: 'Team', type: "text", width: "150px", editing: false};


        const createAjaxCall = (data) => {
            return $.ajax({
                url: createRoute,
                dataType: 'json',
                type: 'post',
                contentType: 'application/json',
                data: data,
                processData: false,
                success: function (data, textStatus, jQxhr) {
                    $('#response pre').html(JSON.stringify(data));
                    grid(calendarDates);
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            });
        };


        let getAllDataAjaxCall = () => {
            return $.ajax({
                type: "GET",
                url: readAllEventsRoute,
                dataType: "json"
            })
        };

        let getAllUsersAjaxCall = () => {
            return $.ajax({
                type: "GET",
                url: readAllUsersRoute,
                dataType: "json"
            })
        };

        let buttonIds = [];
        const grid = (calendarDates) => {
            let columns = calendarDates.map(date => {
                if (date === moment().format(DATE_FORMAT)) {
                    return {
                        name: date,
                        type: "text",
                        width: "150px",
                        validate: "required",
                        align: 'center',
                        css: "current-day",
                    }
                }
                return {name: date, type: "text", width: "150px", validate: "required", align: 'center'}
            });

            columns.unshift(teamColumn);
            const fields = columns;
            $("#jsGrid").jsGrid({
                controller: {
                    loadData: function (filter) {
                        return $.when(getAllDataAjaxCall(), getAllUsersAjaxCall()).then(function (a1, a2) {
                            const allData = a1[0];
                            const allUsers = a2[0];
                            const data = [];
                            const calendarEvents = [];
                            _.each(allUsers, user => {
                                data.push({Team: user.fullName, id: user.id});
                            });
                            _.each(allData, result => {
                                _.each(result, property => {
                                    calendarEvents.push(property)
                                })
                            });
                            _.each(data, item => {
                                _.each(calendarDates, calendarDate => {
                                    item[calendarDate] = '<div class="create">&nbsp;</div>'
                                })
                            });
                            _.each(data, item => {
                                _.each(calendarEvents, calendarEvent => {
                                    if (item.id === calendarEvent.userId) {
                                        Object.assign(item, calendarEvent)
                                    }
                                })
                            });
                            return data;
                        });

                    },
                    height: "auto",
                    width: "auto",
                },
                inserting: false,
                editing: false,
                sorting: false,
                paging: true,
                autoload: true,
                fields,
                updateOnResize: true,
                loadIndication: true,
                loadIndicationDelay: 500,
                loadMessage: "Please, wait...",
                loadShading: true,
            });
        };
        calendarDates = setWeekDates(1, 7);
        // $(window).resize(function () {
        //     grid(calendarDates);
        // });


        grid(calendarDates);
        $('#week').addClass('active');

        $('#year').click(() => {
            $('.nav-link').removeClass('active');
            $('#year').addClass('active');
            grid(setYearDates(setYearDates(moment().year())))
        });
        $('#month').click(() => {
            $('.nav-link').removeClass('active');
            $('#month').addClass('active');
            grid(setMonthDates((moment().month())))
        })
        $('#week').click(() => {
            $('.nav-link').removeClass('active');
            $('#week').addClass('active');
            grid(setWeekDates(1, 7));
        })
    </script>
{% endblock %}