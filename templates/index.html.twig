{% extends "base.html.twig" %}
{% block body %}
    <div class="container-fluid">
    <div class="row">
        <div class="col-9" style="min-width: 100%">
            {% include"header.html.twig" %}
        </div>
    </div>
    <div class="row">
        <div class="col-1" style="min-width: 180px">
            {% include "menu.html.twig" %}
        </div>
        <div class="col-8">
            <div class="card bg-light mb-3">
                <div class="card-body">
                    <div id="jsGrid"></div>
                </div>
            </div>
        </div>
    </div>
    <script>
        const DATE_FORMAT = 'DD-MM-YYYY';
        const setWeekDates = (startOfWeek, endOfWeek) => {
            let i;
            const selectedWeekDays = [];
            for (i = startOfWeek; i <= endOfWeek; i++) {
                selectedWeekDays.push(moment().day(i).format(DATE_FORMAT));
            }
            return selectedWeekDays;
        };
        const setMonthDates = (selectedMonth) => {
            let i;
            const selectedMonthDays = [];
            const daysInMonth = moment().month(selectedMonth).daysInMonth();

            for (i = 1; i <= daysInMonth; i++) {
                selectedMonthDays.push(moment().month(selectedMonth).date(i).format(DATE_FORMAT));
            }
            return selectedMonthDays;
        };
        const setYearDates = (year) => {
            let i;
            const selectedYearDates = [];
            for (let i = 0; i < 366; i++) {
                selectedYearDates.push(moment().year(year).dayOfYear(i).format(DATE_FORMAT));
            }
            return selectedYearDates;
        };

        const readAllEventsRoute = "{{ path('read_all_calendar_events')|escape('js') }}";
        const readEventByIdRoute = "{{ path('read_calendar_event_by_id', {calendarEventId: '1'})|escape('js') }}";
        const readAllUsersRoute = "{{ path('read_all_users')|escape('js') }}";
        const createRoute = "{{ path('create_event')|escape('js') }}";
        const updateRoute = "{{ path('update_calendar_event_by_id',{calendarEventId: 1})|escape('js') }}";
        const teamColumn = {name: 'Team', type: "text", width: 150, editing: false};
        let calendarDates = setWeekDates(0, 6);
        let columns = calendarDates.map(date => {
            return {name: date, type: "text", width: 180, validate: "required", align: 'center'}
        });

        const createAjaxCall = (data) => {
            return $.ajax({
                url: createRoute,
                dataType: 'json',
                type: 'post',
                contentType: 'application/json',
                data: data,
                processData: false,
                success: function (data, textStatus, jQxhr) {
                    $('#response pre').html(JSON.stringify(data));
                    grid();
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            });
        };
        const generateUpdateElement = (eventType, id) => {
            return `<button id="entry_${id}" value="${eventType}" class="btn btn-dark" style="width:100%" onclick="">${eventType}</button>`;
        };
        const generateCreateElement = (id) => {
            return `<button value="new" id="${id}" class="btn btn-light" style="width:100%">Empty</button>`;
        };
        columns.unshift(teamColumn);
        const fields = columns;

        let getAllDataAjaxCall = () => {
            return $.ajax({
                type: "GET",
                url: readAllEventsRoute,
                dataType: "json"
            })
        };

        let getAllUsersAjaxCall = () => {
            return $.ajax({
                type: "GET",
                url: readAllUsersRoute,
                dataType: "json"
            })
        };

        let buttonIds = [];
        const grid = () => {
            $("#jsGrid").jsGrid({
                controller: {
                    loadData: function (filter) {
                        return $.when(getAllDataAjaxCall(), getAllUsersAjaxCall()).then(function (a1, a2) {
                            const allData = a1[0];
                            const allUsers = a2[0];
                            const data = [];
                            const calendarEvents = [];
                            _.each(allUsers, user => {
                                data.push({Team: user.fullName})
                            });
                            _.each(allData, result => {
                                _.each(result, property => {
                                    calendarEvents.push(property)
                                })
                            });
                            _.each(data, item => {
                                _.each(calendarDates, calendarDate => {
                                    item[calendarDate] = '<button class="btn btn-outline-dark">None</button>'
                                })
                            });
                            _.each(data, item => {
                                _.each(calendarEvents, calendarEvent => {
                                    if (item.Team === calendarEvent.fullName) {
                                        Object.assign(item, calendarEvent)
                                    }
                                })
                            });
                            return data;
                        });

                    },
                    width: "auto",
                    height: "auto"
                },
                inserting: false,
                editing: false,
                sorting: false,
                paging: false,
                autoload: true,
                fields,
                // data: [
                //     {'Team':'dasdas','09-02-2020':'dsadsa'}
                // ]


            });
        };
        grid();
        $(window).resize(function () {
            grid();
        });
    </script>
{% endblock %}